( ): NOP. Different to Keg where spaces do things.
(!): (iterable) Returns length of L
   : (+ve integer) Returns factorial of L
   : (float/-ve integer) Returns the number (at this point)
("): Start a string
(#): Comment
($): 
(%): Returns L % R
(&): 
('):
((): Start array
()): Close array
(*): Returns L * R
(+): Returns L + R
(,): Print argument
(-): Returns L - R
(.): 
(/): Returns L / R
(0): Number 0
(1): Number 1
(2): Number 2
(3): Number 3
(4): Number 4
(5): Number 5
(6): Number 6
(7): Number 7
(8): Number 8
(9): Number 9
(:): (Dyadic context) Use l as both sides
   : (Otherwise) Double input
(;): Decrement L
(<): Return L < R
(=): Return L == R
(>): Return L > R
(?): Input
(@): 
(A): 
(B): 
(C): 
(D): 
(E): 
(F): 
(G): 
(H): Havle L
(I): 
(J): Join L based on R
(K): 
(L): 
(M): 
(N): 
(O): 
(P): 
(Q): 
(R): (string, number) Repeat L, R times
   : (block, number) Repeatedly evaluate l, R times
(S): 
(T): 
(U): 
(V): 
(W): 
(X): 
(Y): 
(Z): 
([): Grouping syntax
(\): Escape next character
(]): Grouping syntax
(^): 
(_): 
(`): 
(a): 
(b): 
(c): 
(d): 
(e): 
(f): 
(g): 
(h): 
(i): 
(j): 
(k): 
(l): 
(m): 
(n): 
(o): 
(p): 
(q): 
(r): Range from L to R
(s): 
(t): 
(u): 
(v): 
(w): 
(x): 
(y): 
(z): 
({): Grouping syntax
(}): Grouping syntax
(^): Reverses argument

Arguments:

L -> Left Argument
R -> Right Argument
l -> Left block
r -> Right block

// Page template generated using the following Keg script

 zÉ§^(\(,,\),\:, ,
,
